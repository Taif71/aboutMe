{"version":3,"sources":["utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["takeTo","key","url","information","window","open","App","className","style","display","justifyContent","alignItems","height","color","backgroundColor","barColor","fontWeight","fontSize","prompt","promptSymbol","allowTabs","commands","helpMenu","info","about","pub","msg","Date","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqBA+DaA,EAAS,SAACC,GACnB,IAAIC,EAAa,GAEjB,OAAQD,GACJ,IAAK,OACDC,EAAMC,IACN,MACJ,IAAK,SACDD,EAAMC,IACN,MAEJ,IAAK,SACDD,EAAMC,IAQd,OADAC,OAAOC,KAAKH,EAAK,UACVA,GC3BII,E,iLAzCP,OACI,yBAAKC,UAAU,WACXC,MAAO,CACHC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UAGZ,kBAAC,IAAD,CACIC,MAAM,QACNC,gBAAgB,OAChBC,SAAS,QACTP,MAAO,CAAEQ,WAAY,OAAQC,SAAU,SACvCC,OAAO,SACPC,aAAa,IACbC,WAAW,EACXC,SAAU,CACN,KAAQ,iBD5B5BC,sbC6BoB,MAAS,kBDdZ,WACjB,IAAIC,EAAc,GAWlB,OATAA,GAAQ,gEACSpB,IADT,wCAEsBA,IAFtB,eAEiDA,IAFjD,gCAIeA,IAJf,kCAKJ,OALI,kDAMuCA,IANvC,wBAOMA,IAPN,KCW2BqB,IACf,UAAa,kBDACrB,KCCd,aAAgB,iBDIpCsB,gFCHoB,SAAY,kBDcEtB,KCbd,QAAW,iBDgBxB,oBAAaA,KAAb,qBACWA,KADX,wFCfa,KAAQ,kBAAMH,EAAO,SACrB,OAAU,kBAAMA,EAAO,WACvB,YAAe,kBAAMA,EAAO,gBAC5B,OAAU,kBAAMA,EAAO,YAE3B0B,IACI,uOAGI,IAAIC,a,GAnCdC,aCDEC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.389130b2.chunk.js","sourcesContent":["import * as information from './information.json';\r\n\r\nexport const help = ():String => {\r\n    let helpMenu:String = '';\r\n\r\n    helpMenu += '\\nYou can use the following commands here.\\n\\n' +\r\n        'about - shows basic information about myself\\n' +\r\n        'interests - shows my current research interests\\n' +\r\n        'publications - a list of my published research work\\n' +\r\n        'learning - what I\\'m currently learning\\n' +\r\n        'contact - shows contact information\\n' +\r\n        'blog - opens a new tab with my blog\\n' +\r\n        'medium - opens a new tab with my blog\\n' +\r\n        'photography - takes you to my flickr profile\\n' +\r\n        'github - takes you to my github profile\\n';\r\n\r\n\r\n    return helpMenu;\r\n};\r\n\r\nexport const about = (): String => {\r\n    let info:String = '';\r\n\r\n    info += '\\nThis section will be updated more soon.' +\r\n        `\\nHi! I'm ${information.name}.\\n` +\r\n        `I'm currently doing my ${information.msDegree} at ${information.bsUni}. ` +\r\n        \r\n        `I'm a native of ${information.hometown}, currently living in Dhaka.\\n` +\r\n        '\\n\\n' +\r\n        `My hobbies include(but not limited to!) ${information.hobbies}.\\n` +\r\n        `Music? ${information.music}.`;\r\n        \r\n    return info\r\n};\r\n\r\nexport const interests = ():String => information.interestedIn;\r\n\r\nexport const publications = ():String => {\r\n    let pub:String = '';\r\n\r\n    pub += 'I do not have any publications as of yet. This section will be updated soon.';\r\n\r\n    // for (let i in information.publications) {\r\n    //     pub += `\\n-\\n` +\r\n    //         `${information.publications[i].title}\\n` +\r\n    //         `${information.publications[i].link}\\n`;\r\n    // }\r\n\r\n    return pub;\r\n};\r\n\r\nexport const learning = (): String => information.nowLearning;\r\n\r\nexport const contact = ():String => {\r\n    return `\\nemail - ${information.email}` +\r\n        `\\ngithub - ${information.github}` +\r\n        `\\nblog - My blog will be updated soon` +\r\n        `\\nmedium - Medium account will be updated soon!` \r\n        // `\\nflickr - ${information.flickr}` + \r\n        // `\\ntwitter - ${information.twitter}` +\r\n        // `\\nacm-vcard - ${information.acm_vcard}`;\r\n};\r\n\r\nexport const takeTo = (key:string):string => {\r\n    let url:string = '';\r\n\r\n    switch (key) {\r\n        case 'blog':\r\n            url = information.blog;\r\n            break;\r\n        case 'medium':\r\n            url = information.medium;\r\n            break;\r\n        \r\n        case 'github':\r\n            url = information.github;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n\r\n    window.open(url, '_blank');\r\n    return url;\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport Terminal from 'terminal-in-react';\r\n\r\nimport {\r\n    about,\r\n    help,\r\n    contact,\r\n    interests,\r\n    publications,\r\n    learning,\r\n    takeTo,\r\n} from './utils';\r\n\r\nclass App extends Component<{}, {}> {\r\n    render() {\r\n        return (\r\n            <div className=\"terminal\"\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    height: \"100vh\"\r\n                }}\r\n            >\r\n                <Terminal\r\n                    color='white'\r\n                    backgroundColor='blue'\r\n                    barColor='black'\r\n                    style={{ fontWeight: \"bold\", fontSize: \"1.8em\" }}\r\n                    prompt='yellow'\r\n                    promptSymbol='$'\r\n                    allowTabs={false}\r\n                    commands={{\r\n                        'help': () => help(),\r\n                        'about': () => about(),\r\n                        'interests': () => interests(),\r\n                        'publications': () => publications(),\r\n                        'learning': () => learning(),\r\n                        'contact': () => contact(),\r\n                        'blog': () => takeTo('blog'),\r\n                        'medium': () => takeTo('medium'),\r\n                        'photography': () => takeTo('photography'),\r\n                        'github': () => takeTo('github'),\r\n                    }}\r\n                    msg={\r\n                        'Welcome to my portfolio site. My name is Mohammad Tasneemul Alam Bakshi.\\n' +\r\n                        '\\n❓Type help (and press enter or return) to get started!\\n'+\r\n                        '❓You can also click on the green dot on top to maximize the console.\\n' +\r\n                        `⏱${new Date()}`\r\n                    }\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}